@startuml PumaBank_DiagramaClases

!theme plain
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam nodesep 5
skinparam ranksep 15
skinparam dpi 100
skinparam padding 1
skinparam classBackgroundColor white
skinparam classBorderColor black
skinparam wrapWidth 200
skinparam maxMessageSize 150

top to bottom direction

title PumaBank - Diagrama de Clases UML\n8 Patrones de Diseno

' ========================================
' COMPOSITE + STATE (Paquete cuentas)
' ========================================
package cuentas {
    interface ComponenteBancario <<interface>> {
        + getSaldo(): double
        + depositar(monto: double): void
        + retirar(monto: double): void
        + getCliente(): String
        + desc(): String
    }

    class Cuenta {
        - cliente: String
        - saldo: double
        - estado: EstadoCuenta
        - interes: StrategyInteres
        - nip: String
        - fechaCreacion: LocalDate
        - mesesAntiguedad: int
        - detectorFraude: DetectorFraude
        __
        + Cuenta(cliente: String,
        .. saldoInicial: double,
        .. estrategia: StrategyInteres,
        .. estado: EstadoCuenta,
        .. nip: String)
        + retirar(monto: double): void
        + depositar(monto: double): void
        + aplicarInteres(): void
        + getCliente(): String
        + getSaldo(): double
        + setSaldo(saldo: double): void
        + getEstado(): EstadoCuenta
        + setEstado(estado: EstadoCuenta): void
        + getEstrategiaInteres(): StrategyInteres
        + setEstrategiaInteres(interes: StrategyInteres): void
        + getNIP(): String
        + getMesesAntiguedad(): int
        + incrementarAntiguedad(): void
        + reabrirCuenta(): boolean
        + cerrarCuenta(): void
        + desc(): String
    }

    class Portafolio {
        - nombrePortafolio: String
        - componentes: List<ComponenteBancario>
        __
        + Portafolio(nombrePortafolio: String)
        + agregar(componente: ComponenteBancario): void
        + remover(componente: ComponenteBancario): void
        + getCliente(): String
        + getSaldo(): double
        + depositar(monto: double): void
        + retirar(monto: double): void
        + desc(): String
        + getComponentes(): List<ComponenteBancario>
    }
}

package "cuentas.estados" {
    interface EstadoCuenta <<interface>> {
        + getEstado(): String
        + depositar(cuenta: Cuenta, monto: double): void
        + retirar(cuenta: Cuenta, monto: double): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }

    class EstadoActiva {
        + getEstado(): String
        + depositar(cuenta: Cuenta, monto: double): void
        + retirar(cuenta: Cuenta, monto: double): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }

    class EstadoCerrada {
        + getEstado(): String
        + depositar(cuenta: Cuenta, monto: double): void
        + retirar(cuenta: Cuenta, monto: double): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres): void
    }

    class EstadoCongelada {
        + getEstado(): String
        + depositar(cuenta: Cuenta, monto: double): void
        + retirar(cuenta: Cuenta, monto: double): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres): void
    }

    class EstadoSobregirada {
        + getEstado(): String
        + depositar(cuenta: Cuenta, monto: double): void
        + retirar(cuenta: Cuenta, monto: double): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres): void
        + calculaInteres(cuenta: Cuenta,
        .. estrategia: StrategyInteres,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }
}

package "cuentas.seguridad" {
    class DetectorFraude {
        - {static} MONTO_SOSPECHOSO_DEPOSITO: double
        - {static} MONTO_SOSPECHOSO_RETIRO: double
        - {static} MAX_OPERACIONES_POR_SESION: int
        - historialReciente: List<Transaccion>
        - contadorOperaciones: int
        __
        + DetectorFraude()
        + esDepositoSospechoso(monto: double,
        .. saldoActual: double): boolean
        + esRetiroSospechoso(monto: double,
        .. saldoActual: double): boolean
        + excesoDeOperaciones(): boolean
        + cambioBruscoDePatron(saldoActual: double,
        .. promedioHistorico: double): boolean
        + obtenerDescripcionFraude(): String
        + reiniciarContador(): void
        + limpiarHistorialAntiguo(): void
    }
}

' ========================================
' STRATEGY (Paquete intereses)
' ========================================
package intereses {
    interface StrategyInteres <<interface>> {
        + getNombre(): String
        + calInteres(saldo: double): double
        + calInteres(saldo: double,
        .. mesActual: int,
        .. saldoPromedio: double): double
    }

    class InteresMensual {
        + getNombre(): String
        + calInteres(saldo: double): double
    }

    class InteresAnual {
        + getNombre(): String
        + calInteres(saldo: double): double
        + calInteres(saldo: double,
        .. mesActual: int,
        .. saldoPromedio: double): double
    }

    class InteresPremium {
        - {static} TASA_BASE: double = 0.08
        - {static} BONO_SALDO_ALTO: double = 0.02
        - {static} BONO_ANTIGUEDAD: double = 0.01
        - mesesAntiguedad: int
        __
        + InteresPremium()
        + incrementarAntiguedad(): void
        + getAntiguedad(): int
        + getNombre(): String
        + calInteres(saldo: double): double
        + getTasaActual(saldo: double): double
        + proyectarIntereses(saldoProyectado: double): double
    }
}

' ========================================
' DECORATOR (Paquete serviciosextra)
' ========================================
package serviciosextra {
    interface ServAdicional <<interface>> {
        + getDesc(): String
        + getCosto(): double
    }

    class CuentaBase {
        - cuenta: Cuenta
        __
        + CuentaBase(cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
        + getCuenta(): Cuenta
    }

    abstract class ServDecorator {
        # servicioNormal: ServAdicional
        # cuenta: Cuenta
        __
        + ServDecorator(servicioNormal: ServAdicional,
        .. cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
    }

    class Recompensas {
        - {static} RECOMPENSA_BASE: double = 100.0
        __
        + Recompensas(servicioNormal: ServAdicional,
        .. cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
        + aplicarRecompensa(): void
    }

    class SeguroAntifraude {
        + SeguroAntifraude(servicioNormal: ServAdicional,
        .. cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
    }

    class AlertasPremium {
        + AlertasPremium(servicioNormal: ServAdicional,
        .. cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
    }

    class BeneficiosPremium {
        - {static} DESCUENTO_SERVICIOS: double = 0.25
        - gestor: GestorAlertas
        __
        + BeneficiosPremium(servicioNormal: ServAdicional,
        .. cuenta: Cuenta)
        + getDesc(): String
        + getCosto(): double
        + proyectarBeneficios(): String
    }
}

' ========================================
' OBSERVER (Paquete observer)
' ========================================
package observer {
    interface Observador <<interface>> {
        + actualizar(mensaje: String): void
    }

    interface Sujeto <<interface>> {
        + agregarObservador(obs: Observador): void
        + eliminarObservador(obs: Observador): void
        + notificarObservadores(mensaje: String): void
    }

    class ClienteObservador {
        - nombre: String
        __
        + ClienteObservador(nombre: String)
        + actualizar(mensaje: String): void
    }

    class GestorAlertas {
        - observadores: List<Observador>
        - cuenta: Cuenta
        __
        + GestorAlertas(cuenta: Cuenta)
        + agregarObservador(obs: Observador): void
        + eliminarObservador(obs: Observador): void
        + notificarObservadores(mensaje: String): void
        + generarAlerta(evento: String): void
    }
}

' ========================================
' PROXY (Paquete acceso)
' ========================================
package acceso {
    interface OperacionesBancarias <<interface>> {
        + consultarSaldo(): double
        + retirar(monto: double): void
        + depositar(monto: double): void
        + getCuenta(): Cuenta
    }

    class OperacionesBancariasImpl {
        - cuenta: Cuenta
        __
        + OperacionesBancariasImpl(cuenta: Cuenta)
        + consultarSaldo(): double
        + retirar(monto: double): void
        + depositar(monto: double): void
        + getCuenta(): Cuenta
    }

    class AccesoRemoto {
        - operaciones: OperacionesBancarias
        - nipAlmacenado: String
        - autenticado: boolean
        - intentosFallidos: int
        - gestor: GestorAlertas
        - {static} MAX_INTENTOS: int = 3
        __
        + AccesoRemoto(cuenta: Cuenta)
        + verificarNIP(nip: String): boolean
        + consultarSaldo(): double
        + retirar(monto: double): void
        + depositar(monto: double): void
        + getCuenta(): Cuenta
        + cerrarSesion(): void
        + estaAutenticado(): boolean
    }
}

' ========================================
' TEMPLATE METHOD (Paquete procesos)
' ========================================
package procesos {
    abstract class ProcesoMensualTemplate <<abstract>> {
        + {final} ejecutarProcesoMensual(
        .. cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
        # actualizarAntiguedad(cuenta: Cuenta): void
        # {abstract} revisarSobregiros(cuenta: Cuenta): void
        # {abstract} calcularIntereses(cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
        # generarReporte(cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }

    class ProcesoMensualStandard {
        - {static} CARGO_SOBREGIRO: double = 500.0
        __
        # revisarSobregiros(cuenta: Cuenta): void
        # calcularIntereses(cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }

    class ProcesoMensualPremium {
        # revisarSobregiros(cuenta: Cuenta): void
        # calcularIntereses(cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
        # generarReporte(cuenta: Cuenta,
        .. mesActual: int,
        .. saldoPromedio: double): void
    }

    class ProcesoMensual {
        - cuentas: List<Cuenta>
        - saldosHistoricos: Map<Cuenta, List<Double>>
        - registroOperaciones: Map<Cuenta, List<String>>
        - fechaUltimoCorte: LocalDate
        __
        + ProcesoMensual()
        + agregarCuenta(cuenta: Cuenta): void
        + registrarOperacion(cuenta: Cuenta,
        .. operacion: String): void
        + registrarSaldoDiario(cuenta: Cuenta): void
        + ejecutarProcesoMensual(): void
    }
}

' ========================================
' FACTORY METHOD (Paquete fabrica)
' ========================================
package fabrica {
    class FabricaCuentas <<Factory>> {
        - {static} uwu: Scanner
        __
        + {static} crearCuenta(): Cuenta
    }
}

' ========================================
' Utilidades
' ========================================
package excepciones {
    class EntradaInvalida {
        + EntradaInvalida(mensaje: String)
    }
}

package archivo {
    class GeneradorTXT <<Utility>> {
        + {static} exportarContenido(
        .. nombreArchivo: String,
        .. contenido: String): void
        + {static} exportarCuenta(cuenta: Cuenta,
        .. nombreArchivo: String): void
        + {static} exportarPortafolio(
        .. portafolio: Portafolio,
        .. nombreArchivo: String): void
    }
}

package main {
    class Main {
        + {static} main(args: String[]): void
    }
}

package gui {
    class PumaBankGUI {
        - cuentas: Map<String, Cuenta>
        - gestorPrincipal: GestorAlertas
        - procesoMensual: ProcesoMensual
        - mesActual: int
        __
        + start(primaryStage: Stage): void
    }
}

' ========================================
' RELACIONES
' ========================================

' COMPOSITE
ComponenteBancario <|.. Cuenta
ComponenteBancario <|.. Portafolio
Portafolio o-- "0..*" ComponenteBancario

' STATE
EstadoCuenta <|.. EstadoActiva
EstadoCuenta <|.. EstadoCerrada
EstadoCuenta <|.. EstadoCongelada
EstadoCuenta <|.. EstadoSobregirada
EstadoActiva -[hidden]down- EstadoCerrada
EstadoCerrada -[hidden]down- EstadoCongelada
EstadoCongelada -[hidden]down- EstadoSobregirada
Cuenta --> EstadoCuenta : estado

' STRATEGY
StrategyInteres <|.. InteresMensual
StrategyInteres <|.. InteresAnual
StrategyInteres <|.. InteresPremium
InteresMensual -[hidden]down- InteresAnual
InteresAnual -[hidden]down- InteresPremium
Cuenta --> StrategyInteres : interes

' DECORATOR
ServAdicional <|.. CuentaBase
ServAdicional <|.. ServDecorator
ServDecorator <|-- Recompensas
ServDecorator <|-- SeguroAntifraude
ServDecorator <|-- AlertasPremium
ServDecorator <|-- BeneficiosPremium
Recompensas -[hidden]down- SeguroAntifraude
SeguroAntifraude -[hidden]down- AlertasPremium
AlertasPremium -[hidden]down- BeneficiosPremium
ServDecorator o-- ServAdicional
CuentaBase --> Cuenta
ServDecorator --> Cuenta

' OBSERVER
Observador <|.. ClienteObservador
Sujeto <|.. GestorAlertas
GestorAlertas o-- "0..*" Observador
GestorAlertas --> Cuenta

' PROXY
OperacionesBancarias <|.. OperacionesBancariasImpl
OperacionesBancarias <|.. AccesoRemoto
AccesoRemoto o-- OperacionesBancarias : operaciones
OperacionesBancariasImpl --> Cuenta
AccesoRemoto --> GestorAlertas

' TEMPLATE METHOD
ProcesoMensualTemplate <|-- ProcesoMensualStandard
ProcesoMensualTemplate <|-- ProcesoMensualPremium
ProcesoMensualStandard -[hidden]down- ProcesoMensualPremium
ProcesoMensual ..> ProcesoMensualTemplate : usa
ProcesoMensual --> "0..*" Cuenta

' FACTORY
FabricaCuentas ..> Cuenta : <<create>>
FabricaCuentas ..> StrategyInteres : <<create>>
FabricaCuentas ..> EstadoActiva : <<create>>

' DETECTOR FRAUDE
Cuenta *-- DetectorFraude

' OTROS
GeneradorTXT ..> ComponenteBancario : <<use>>
EntradaInvalida --|> RuntimeException
BeneficiosPremium --> GestorAlertas
Main ..> PumaBankGUI : <<use>>
PumaBankGUI --> "0..*" Cuenta
PumaBankGUI ..> FabricaCuentas : <<use>>
PumaBankGUI --> ProcesoMensual
PumaBankGUI ..> AccesoRemoto : <<use>>

@enduml
